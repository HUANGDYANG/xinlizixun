<template>
    <view class="container" >
      <view class="header" >
        <view class="title">卡特尔十六种个性因素测试16PF-人格测试 测评报告</view>
        <view class="test_time">
          <view class="label">测试时间：</view>
          <view class="date">2019/01/18 11:44</view>
        </view>
      </view>

      <view class="content">
        <view class="uerinfo">
          <image src="{{userInfo.mainPic}}" class="avatar"></image>
          <view class="name">{{userInfo.name}}</view>
        </view>
        <view class="line20"></view>
        <view class="echarts">
          <view class="analyze_r header_i">得分结果</view>
          <echar :height="height1" :ec="ec" />
        </view>
         <view class="line20"></view>
        <view class="analyze_c">
          <view class="analyze_n header_i">得分分析</view>
          <repeat for="{{evaluationResult}}">
          <view class="analyze_i">
            <view class="title">{{index + 1}}）{{item.categoryName}}{{item.content}}：<text class="status">{{item.memberScore}}（{{item.resultName}}）</text></view>
            <view><text class="intro" space="nbsp">    {{item.resultName}}：{{item.content}}。</text></view>
            <view><text class="description" space="nbsp">    {{item.specialDesc}}</text></view>
          </view>
          </repeat>
        </view>
         <view class="line20"></view>
        <view class="evaluation_r">
          <view class="evaluation_n header_i">测评结果</view>
          <repeat for="{{evaluationResult}}" key="">
           <view class="evaluation_i">
            <view class="title">{{item.categoryName}}：<text class="status">{{item.memberScore}}（低分）</text></view>
            <!-- <view><text class="description" space="nbsp">{{item.specialDesc}}</text></view> -->
              <view><text class="description" space="nbsp">    {{item.specialDesc}}</text></view>
            </view>
          </repeat>
        </view>
      </view>

      <view class="back_button" @tap="back">
        返回
      </view>
    </view>
</template>
<script>
import wepy from 'wepy'
import echar from '../components/ec'
import { goPath, checkInfo } from '../util.js'
import api from '../api.js'
var option = null
option = {
    // title: {
    //     text: '世界人口总量',
    //     subtext: '数据来自网络'
    // },
    tooltip: {
        trigger: 'axis',
        axisPointer: {
            type: 'shadow'
        }
    },
    // legend: {
    //     data: ['2011年', '2012年']
    // },
    grid: {
        left: '3%',
        bottom: '5%',
        containLabel: true
    },
    xAxis: {
        type: 'value',
        boundaryGap: [0, 0.1],
        max: 10,
        name: '分',
        axisTick: {
          show: false,
          // 刻度线，字体旁边那个点
          lineStyle: {
          }
        },
        axisLine: {
          // 轴线
          lineStyle: {
            color: '#D8E8FF'
          }
        },
        splitLine: {
          // 分割线
            show:true,
            lineStyle : {
              type: 'dashed',
              color: '#EEEEEE'
            }
        },
        axisLabel: {
          // 分
          show: true,
          textStyle: {
            color: '#999999',
            // fontSize: 16
          },
        },
        nameTextStyle: {
          // 数字 轴数
          color: '#999999',
          // fontSize: 16
        },
        splitNumber: 10, //
        //[ default: 5 ]
        // 坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整。
    },
    yAxis: {
        nameTextStyle: {
          color: '#2565C3',
          // fontSize: 16
        },
        axisLabel: {
          show: true,
          textStyle: {
              color: '#2565C3',
              // fontSize: 16
          },
        },
        axisTick: {
          lineStyle: {
            type: 'dashed',
            color: '#EEEEEE'
          }
        },
        axisLine: {
          // 轴线
          lineStyle: {
            color: '#D8E8FF'
          }
        },

        // inverse: true
        type: 'category',
        name: '因素',
        data: ['A','B','C'].reverse()
    },
    series: [
        {
            type: 'bar',
            data: [1, 2, 3],
            itemStyle: {
              normal: {
                  // 随机显示
                  // color:function(d){return "#"+Math.floor(Math.random()*(256*256*256-1)).toString(16);}
                  // 定制显示（按顺序）
                  color: function(params) {
                      var colorList = ['#50C4CC','#3694AE','#F27E88','#68C7BE','#2392D0', '#50C4CC','#3694AE','#F27E88','#68C7BE','#2392D0'];
                      return colorList[params.dataIndex]
                  },
              }
            },
            label: {
              normal: {
                  show: true,
                  position: 'insideRight',
              }
            },
            // barWidth: '20rpx',
            // barCategoryGap: '20rpx',
            // barGap: '20rpx'
        }
    ]
};

export default class Test_result extends wepy.page {
  config = {
    'navigationBarTitleText': '测试结果'
  };

  components = {
    echar: echar
  }
  computed = {
    height1() {
       if(this.option.yAxis.data.length == 1) {
         return 200  * this.option.yAxis.data.length + 'rpx'
       }else if(this.option.yAxis.data.length <= 2) {
        return 180 * this.option.yAxis.data.length  + 'rpx'
       }else if(this.option.yAxis.data.length < 5) {
        return 130 * this.option.yAxis.data.length  + 'rpx'
      }else {
        return 110 * this.option.yAxis.data.length + 50 + 'rpx'
      }
    
    }
  }
  data = {
    ec: {
     lazyLoad: true,
     option: ''
    },
    evaluationScoreDetail: '',
    evaluationResult: '',
    id: '',
    answerIds: '',
    userInfo: '',
    artiles: '',
    option: {
          // title: {
          //     text: '世界人口总量',
          //     subtext: '数据来自网络'
          // },
          tooltip: {
              trigger: 'axis',
              axisPointer: {
                  type: 'shadow'
              }
          },
          // legend: {
          //     data: ['2011年', '2012年']
          // },
          grid: {
              left: '3%',
              bottom: '5%',
              containLabel: true
          },
          xAxis: {
              type: 'value',
              boundaryGap: [0, 0.1],
              max: 10,
              name: '分',
              axisTick: {
                show: false,
                // 刻度线，字体旁边那个点
                lineStyle: {
                }
              },
              axisLine: {
                // 轴线
                lineStyle: {
                  color: '#D8E8FF'
                }
              },
              splitLine: {
                // 分割线
                  show:true,
                  lineStyle : {
                    type: 'dashed',
                    color: '#EEEEEE'
                  }
              },
              axisLabel: {
       
                // 分
                show: true,
                textStyle: {
                  color: '#999999',
                  fontSize: 25
                },
              },
              nameTextStyle: {
                // 数字 轴数
                color: '#999999',
                fontSize: 25
              },
              splitNumber: 10, //
              //[ default: 5 ]
              // 坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整。
          },
          yAxis: {
              nameTextStyle: {
                color: '#2565C3',
                fontSize: 25
              },
              axisLabel: {
                  interval: 0,
                show: true,
                textStyle: {
                    color: '#2565C3',
                    fontSize: 25
                },
              },
              axisTick: {
                lineStyle: {
                  type: 'dashed',
                  color: '#EEEEEE'
                }
              },
              axisLine: {
                // 轴线
                lineStyle: {
                  color: '#D8E8FF'
                }
              },

              // inverse: true
              type: 'category',
              name: '因素',
              data:  ['A','B','C'].reverse()
          },
          series: [
              {
                  type: 'bar',
                  data: [1,2,3],
                  itemStyle: {
                    normal: {
                        // 随机显示
                        // color:function(d){return "#"+Math.floor(Math.random()*(256*256*256-1)).toString(16);}
                        // 定制显示（按顺序）
                        color: function(params) {
                            var colorList = ['#50C4CC','#3694AE','#F27E88','#68C7BE','#2392D0', '#50C4CC','#3694AE','#F27E88','#68C7BE','#2392D0'];
                            return colorList[params.dataIndex]
                        },
                    }
                  },
                  label: {
                    normal: {
                        show: true,
                        position: 'insideRight',
                    }
                  },
                  // barWidth: '20rpx',
                  // barCategoryGap: '20rpx',
                  // barGap: '20rpx'
              }
          ]
      },
      categoryNameList: [],
      memberScore: []
  }

  methods = {
    back() {
      wx.navigateBack()
    }
  }
  getEvaluationScoreDetail() {
    // (用户测评列表的)用户测评结果
    let { getEvaluationScoreDetail } = api
    getEvaluationScoreDetail(this.id).then(res => {
      if(res) {
         this.evaluationResult = res.data
        this.evaluationResult.forEach((item,i)=>{

          this.evaluationResult[i].content = this.deleteHtmlTag(item.content)
          this.evaluationResult[i].specialDesc = this.deleteHtmlTag(item.specialDesc)
           this.categoryNameList.push(item.categoryName)
           this.memberScore.push(item.memberScore)
        })
        this.option.yAxis.data = this.categoryNameList
        this.option.series[0].data = this.memberScore
        this.ec.option = this.option
        this.$invoke('echar', 'init')
        this.$apply()
      }
    })
  }


  getEvaluationResult({
    evaluationId,
    answerIds,
  } = {}) {
    // 提交测试答案获取结果
    let { getEvaluationResult } = api
    getEvaluationResult({
    evaluationId: this.id,
    answerIds: this.answerIds,
  }).then(res => {
    var that = this;
      if(res) {
        this.evaluationResult = res.data
        this.evaluationResult.forEach((item,i)=>{
          this.evaluationResult[i].content = this.deleteHtmlTag(item.content)
           this.evaluationResult[i].specialDesc = this.deleteHtmlTag(item.specialDesc)
          this.categoryNameList.push(item.categoryName)
           this.memberScore.push(item.memberScore)
        })
        this.option.yAxis.data =   this.categoryNameList
        this.option.series[0].data =   this.memberScore
        this.ec.option = this.option

        this.$invoke('echar', 'init')
        this.$apply()
      }
    })
  }

  deleteHtmlTag(str){
  str = str.replace(/<[^>]+>|&[^>]+;/g,"").trim();//去掉所有的html标签和&nbsp;之类的特殊符合
  return str;
  }

  async onLoad (option) {
    let { id, answerIds,type } = option
    this.id = id
    this.answerIds = answerIds
    this.userInfo =  Object.assign({}, this.$parent.globalData.userInfo)
    this.ec.option = this.option

    if(type) {
      this.getEvaluationScoreDetail()
    }else {
      this.getEvaluationResult()
    }

  }

   echartInit (e) {
    initChart(e.detail.canvas, e.detail.width, e.detail.height);
  }

}
</script>
<style lang="less">
page{
  background: #FFFFFF;
}

.header {
  padding: 0 29rpx;
  .title {
    font-size: 32rpx;
    color: #333333;
    margin-top: 32rpx;
    margin-bottom: 32rpx;
    font-weight: bold;
  }
  .test_time{
    color: #999999;
    display: flex;
    .label{
      font-size: 24rpx;
    }
    .date {
      font-size: 24rpx;
    }
  }
}

.content {
  margin: 0 29rpx;
  margin-top: 6rpx;
  margin-top: 42rpx;
  background: #fff;
  border-radius: 10rpx;
  box-shadow: 0rpx 0rpx 10px rgba(3, 3, 3, 0.2);
  .header_i{
    font-size: 30rpx;
    padding-left: 22rpx;
    height: 100rpx;
    line-height: 100rpx;
    color: #000000;
    border-bottom: 1rpx solid #EEEEEE;
    font-weight: bold;
  }
  .line20{
    height: 20rpx;
    background: #F6F6FA;
  }
  .uerinfo{
    height: 240rpx;
    display: flex;
    flex-direction: column;
    // justify-content: space-around;
    align-items: center;
    .avatar {
      width: 114rpx;
      height: 114rpx;
      border-radius: 100%;
      margin-top: 46rpx;
    }
    .name {
       margin-top: 26rpx;
      font-weight: bold;
      font-size: 30rpx;
      color: #333333;
    }
  }
  .echarts {
    // height: 1046rpx;
    // background: red;
    // position:absolute;
    //   top:0;
    //   bottom:0;
    //   left:0;
    //   right:0;p
    padding-bottom: 30rpx;
    .analyze_r{
      font-size: 30rpx;
      padding-left: 22rpx;
      height: 100rpx;
      line-height: 100rpx;
      color: #000000;
      border-bottom: 1rpx solid #EEEEEE;
      font-weight: bold;
    }
  }

  .analyze_c {
    .analyze_n {
      font-size: 30rpx;
      padding-left: 22rpx;
      height: 100rpx;
      line-height: 100rpx;
      color: #000000;
      border-bottom: 1rpx solid #EEEEEE;
      font-weight: bold;
    }
    .analyze_i {
      margin: 36rpx 27rpx 18rpx 26rpx;
      padding-bottom: 26rpx;
      border-bottom: 1rpx solid #EEEEEE;
      .title{
        font-size: 28rpx;
        flex-wrap: bold;
        .status {
          color: #2565C3;
        }
      }
      .intro {
        color: #666666;
        font-size: 26rpx;
      }
      .description {
        color: #666666;
        font-size: 26rpx;
      }
    }
  }

  .evaluation_r {
    .evaluation_n {
      font-size: 30rpx;
      padding-left: 22rpx;
      height: 100rpx;
      line-height: 100rpx;
      color: #000000;
      border-bottom: 1rpx solid #EEEEEE;
      font-weight: bold;
    }
    .evaluation_i {
      margin: 36rpx 27rpx 18rpx 26rpx;
      padding-bottom: 26rpx;
      border-bottom: 1rpx solid #EEEEEE;
      .title{
        font-size: 28rpx;
        flex-wrap: bold;
        .status {
          color: #2565C3;
        }
      }
      .intro {
        color: #666666;
        font-size: 26rpx;
      }
      .description {
        color: #666666;
        font-size: 26rpx;
      }
    }
  }
}

.back_button{
  width: 686rpx;
  height: 90rpx;
  background: #2565C3;
  line-height: 90rpx;
  margin: 100rpx 32rpx;
  text-align: center;
  color: #fff;
  font-size: 32rpx;
  border-radius: 10rpx;
}

.container {
    // position:absolute;
    // top:0;
    // bottom:0;
    // left:0;
    // right:0;
    // display:flex;
    // flex-direction:column;
    // align-items:center;
    // justify-content:space-between;
    // box-sizing:border-box;
}
</style>

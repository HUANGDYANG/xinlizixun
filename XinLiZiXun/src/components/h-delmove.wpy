<template>
  <view class="container">
    <repeat for="{{items}}">
      <view class="touch-item {{item.isTouchMove ? 'touch-move-active' : ''}}"
            data-index="{{index}}"
            @touchstart="touchstart"
            @touchmove="touchmove">
        <view class="content">
          <slot></slot>
        </view>
        <view class="del"
              catchtap="del"
              data-index="{{index}}">
          <image class="del_icon"
                 src="../images/icon_delete_money@2x.png" />
        </view>
      </view>
    </repeat>
  </view>
</template>
<script>
import wepy from 'wepy'

export default class HDelmove extends wepy.component {
  // 对接口改其他的
  props = {
    // 数据
    items: {
      type: Array,
      default: [],
      twoWay: true
    },
    startX: 0, // 开始坐标
    startY: 0
  }

  data = {

  }

  components = {}

  methods = {
    // 手指触摸动作开始 记录起点X坐标
    touchstart (e) {
      // 开始触摸时 重置所有删除
      this.data.items.forEach(function (v, i) {
        if (v.isTouchMove)// 只操作为true的
          {v.isTouchMove = false;}
      })

      this.startX = e.changedTouches[0].clientX,
        this.startY = e.changedTouches[0].clientY,
        this.items = this.data.items
    },

    // 滑动事件处理
    touchmove (e) {
      var that = this,
        index = e.currentTarget.dataset.index, // 当前索引
        startX = that.data.startX, // 开始X坐标
        startY = that.data.startY, // 开始Y坐标
        touchMoveX = e.changedTouches[0].clientX, // 滑动变化坐标
        touchMoveY = e.changedTouches[0].clientY, // 滑动变化坐标
        // 获取滑动角度
        angle = that.angle({ X: startX, Y: startY }, { X: touchMoveX, Y: touchMoveY })
      that.data.items.forEach(function (v, i) {
        v.isTouchMove = false
        // 滑动超过30度角 return
        if (Math.abs(angle) > 30) return
        if (i == index) {
          if (touchMoveX > startX) // 右滑
            {v.isTouchMove = false}
          else // 左滑
            {v.isTouchMove = true}
        }
      })
      // 更新数据
      this.items = that.data.items
    },

    // 删除事件
    del (e) {
      this.data.items.splice(e.currentTarget.dataset.index, 1)
      this.items = this.data.items
    }

  }
  onLoad () {
  }

  /**
   * 计算滑动角度
   * @param {Object} start 起点坐标
   * @param {Object} end 终点坐标
   */
  angle (start, end) {
    var _X = end.X - start.X,
      _Y = end.Y - start.Y
    // 返回角度 /Math.atan()返回数字的反正切值
    return 360 * Math.atan(_Y / _X) / (2 * Math.PI)
  }
}
</script>

<style type="less">
.touch-item {
  font-size: 28rpx;
  display: flex;
  /* justify-content: space-between; */
  /* border-bottom:2rpx solid #ccc; */
  width: 100%;
  overflow: hidden;
}
.content {
  width: 100%;
  margin-right: 0;
  -webkit-transition: all 0.4s;
  transition: all 0.4s;
  -webkit-transform: translateX(124rpx);
  transform: translateX(124rpx);
  margin-left: -124rpx;
}
.del {
  background-color: rgba(224, 102, 102, 1);
  width: 124rpx;
  height: 302rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #fff;
  -webkit-transform: translateX(180rpx);
  transform: translateX(180rpx);
  -webkit-transition: all 0.4s;
  transition: all 0.4s;
  .del_icon {
    width: 34rpx;
    height: 36rpx;
  }
}
.touch-move-active .content,
.touch-move-active .del {
  -webkit-transform: translateX(0);
  transform: translateX(0);
}
</style>
